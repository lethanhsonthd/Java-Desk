/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gridlayoutdemo;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author son
 */
public class GridLayout extends javax.swing.JFrame {

    public int col = 3, row = 3;
    public boolean isStop = false;
    public Thread t;

    /**
     * Creates new form GridLayout
     */
    public GridLayout() {
        initComponents();
    }
    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        cbxLevel = new javax.swing.JComboBox();
        btnStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setPreferredSize(new java.awt.Dimension(367, 367));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 367, Short.MAX_VALUE)
        );

        lblTime.setText("jLabel1");

        cbxLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3x3", "4x4" }));

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnStart)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cbxLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStart))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        String level = (String) cbxLevel.getSelectedItem();
        if (t != null) {
            t.stop();
        }
        if (level.equals("3x3")) {
            this.col = 3;
            this.row = 3;
            setLayoutAndAddButton(3, 3);
            t = new MyThread();
            t.start();
        } else {
            this.col = 4;
            this.row = 4;
            setLayoutAndAddButton(4, 4);
            t = new MyThread();
            t.start();
        }
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GridLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GridLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GridLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GridLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GridLayout().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JComboBox cbxLevel;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    private void setLayoutAndAddButton(int row, int col) {
        panel.removeAll();
        panel.setLayout(new java.awt.GridLayout(row, col));
        for (int i = 1; i < row * col; i++) {
            MyButton t = new MyButton(i + "");
            t.addActionListener(t);
            panel.add(t);
        }
        MyButton t = new MyButton("");
        t.addActionListener(t);
        panel.add(t);
//        randomGame();
    }

    private void randomGame() {
        int currentIndex = -9999;
        int[] rd = {1, -1, -col, +col};
        for (int loop = 0; loop < 1000; loop++) {
            for (int i = 0; i < row * col; i++) {
                JButton temp = (JButton) panel.getComponent(i);
                if (temp.getText().equals("")) {
                    currentIndex = i;
                    break;
                }
            }
            int randomDirect = (int) (Math.round(Math.random() * 10000) % 4);
            if (canSwap(currentIndex, currentIndex + rd[randomDirect])) {
                swap(currentIndex, currentIndex + rd[randomDirect]);
            }
        }
    }

    private void swap(int firstIndex, int secondIndex) {
        if (firstIndex == secondIndex) {
            return;
        }
        if (firstIndex > secondIndex) {
            int temp = firstIndex;
            firstIndex = secondIndex;
            secondIndex = temp;
        }
        MyButton first = (MyButton) panel.getComponent(firstIndex);
        MyButton second = (MyButton) panel.getComponent(secondIndex);
        panel.remove(first);
        panel.remove(second);
        panel.add(second, firstIndex);
        panel.add(first, secondIndex);
        panel.updateUI();
    }

    private boolean canSwap(int firstIndex, int secondIndex) {
        if (firstIndex < 0 || firstIndex >= row * col || secondIndex < 0 || secondIndex >= row * col) {
            return false;
        }
        if (Math.abs(firstIndex - secondIndex) == 1 && checkInline(firstIndex, secondIndex)) {
            return true;
        }
        if (Math.abs(firstIndex - secondIndex) == col) {
            return true;
        }
        return false;
    }

    private boolean checkInline(int firstIndex, int secondIndex) {
        if (firstIndex > secondIndex) {
            int temp = firstIndex;
            firstIndex = secondIndex;
            secondIndex = temp;
        }
        for (int i = 0; i <= 1000; i++) {
            int lower = i * col;
            int upper = i * col + col - 1;
            if (lower <= firstIndex && secondIndex <= upper) {
                return true;
            }
        }
        return false;
    }

    private boolean isWin() {
        for (int i = 1; i < row * col - 1; i++) {
            try {
                MyButton t1 = (MyButton) panel.getComponent(i);
                MyButton t0 = (MyButton) panel.getComponent(i - 1);
                if (Integer.parseInt(t1.getText()) != Integer.parseInt(t0.getText()) + 1) {
                    return false;
                }
            } catch (Exception e) {
                return false;
            }
        }
        return true;
    }

    class MyButton extends JButton implements ActionListener {

        public MyButton(String text) {
            super(text);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int currentIndex = -9999;
            for (int i = 0; i < row * col; i++) {
                JButton temp = (JButton) panel.getComponent(i);
                if (temp.getText().equals(this.getText())) {
                    currentIndex = i;
                    break;
                }
            }
            for (int i = 0; i < row * col; i++) {
                JButton temp = (JButton) panel.getComponent(i);
                if (temp.getText().equals("")) {
                    if (canSwap(i, currentIndex)) {
                        swap(i, currentIndex);
                        if (isWin()) {
                            isStop = true;
                            JOptionPane.showMessageDialog(null, "Congratulation!");
                            break;
                        }
                        break;
                    }
                }
            }
        }

    }

    class MyThread extends Thread {

        int time = 0;

        @Override
        public void run() {
            while (true) {
                try {
                    GridLayout.this.lblTime.setText(time + "");
                    time++;
                    sleep(1000);
                    if (GridLayout.this.isStop) {
                        stop();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(GridLayout.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
